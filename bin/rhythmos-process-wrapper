#!/user/bin/env python
# -*- coding: utf-8 -*-

__author__    = "Ole Weidner"
__copyright__ = "Copyright 2013, Ole Weidner"
__email__     = "ole.weidner@icloud.com"
__license__   = "MIT"

import sys
import signal
import time
import optparse

from colorama import init, Fore, Back, Style
from radical.agent.version import version
from radical.agent.processwrapper import ProcessWrapper


#-----------------------------------------------------------------------------
#
def startup_logo():
    init()
    logo = Fore.BLUE
    logo += """
               _ _           _ 
              | (_)         | |
 _ __ __ _  __| |_  ___ __ _| |
| '__/ _` |/ _` | |/ __/ _` | |
| | | (_| | (_| | | (_| (_| | |
|_|  \__,_|\__,_|_|\___\__,_|_| 
""" + Fore.RED + """PROCESS WRAPPER Version %s""" % version
    logo += Fore.RESET
    return logo


#-----------------------------------------------------------------------------
#
def parse_commandline():

    parser = optparse.OptionParser()

    parser.add_option('-i', '--interval',
                      dest='interval',
                      help='The interval (in seconds) at which to collect process metrics.',
                      default=5)


    parser.add_option('-o', '--outputfile',
                      metavar='URL',
                      dest='outputfile',
                      help='The name if the output file.',
                      default='process_metrics.json')

    install_opts = optparse.OptionGroup(
        parser, 'Monitoring Options', 'These options control monitoring',
    )
    install_opts.add_option('--dummy_1', action='store_true', default=False,
                            help='Dummy Option')
    parser.add_option_group(install_opts)

    # parse the whole shebang
    (options, args) = parser.parse_args()

    print Fore.BLUE + startup_logo() + Fore.RESET

    return (options, args)


#-----------------------------------------------------------------------------
#
def _signal_handler(signum, frame):
    print 'Signal handler called with signal', signum
    print 'EXITING'
    sys.exit(0)

for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
    signal.signal(sig, _signal_handler)


#-----------------------------------------------------------------------------
#
if __name__ == "__main__":
    options, args = parse_commandline()

    pw = ProcessWrapper(interval=options.interval, 
                        outputfile=options.outputfile, 
                        args=args)
    sys.exit(pw.run())
